"use strict";(self.webpackChunkmy_note=self.webpackChunkmy_note||[]).push([[1875],{3905:function(n,e,t){t.d(e,{Zo:function(){return l},kt:function(){return f}});var a=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function p(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},o=Object.keys(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var c=a.createContext({}),m=function(n){var e=a.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},l=function(n){var e=m(n.components);return a.createElement(c.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},s=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,c=n.parentName,l=p(n,["components","mdxType","originalType","parentName"]),s=m(t),f=r,d=s["".concat(c,".").concat(f)]||s[f]||u[f]||o;return t?a.createElement(d,i(i({ref:e},l),{},{components:t})):a.createElement(d,i({ref:e},l))}));function f(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,i=new Array(o);i[0]=s;var p={};for(var c in e)hasOwnProperty.call(e,c)&&(p[c]=e[c]);p.originalType=n,p.mdxType="string"==typeof n?n:r,i[1]=p;for(var m=2;m<o;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}s.displayName="MDXCreateElement"},5234:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return p},metadata:function(){return c},toc:function(){return m},default:function(){return u}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],p={title:"[GO]MAP\u7684\u4f75\u767c\u554f\u984c"},c={unversionedId:"backend/golang/go_map",id:"backend/golang/go_map",isDocsHomePage:!1,title:"[GO]MAP\u7684\u4f75\u767c\u554f\u984c",description:"GOLANG\u7684MAP\u7684\u4f75\u767c\u554f\u984c",source:"@site/docs/backend/golang/go_map.md",sourceDirName:"backend/golang",slug:"/backend/golang/go_map",permalink:"/my-note/docs/backend/golang/go_map",editUrl:"https://github.com/yumememooo/my-note/edit/master/docs/backend/golang/go_map.md",version:"current",lastUpdatedAt:1629616622,formattedLastUpdatedAt:"8/22/2021",frontMatter:{title:"[GO]MAP\u7684\u4f75\u767c\u554f\u984c"},sidebar:"tutorialSidebar",previous:{title:"[go] channel \u4ecb\u7d39",permalink:"/my-note/docs/backend/golang/go_chan"},next:{title:"[go] pprof \u627e\u51fa\u6548\u80fd\u554f\u984c",permalink:"/my-note/docs/backend/golang/go_pprof"}},m=[{value:"GOLANG\u7684MAP\u7684\u4f75\u767c\u554f\u984c",id:"golang\u7684map\u7684\u4f75\u767c\u554f\u984c",children:[]},{value:"sync.Map\u7684\u7528\u6cd5\u4ee5\u53ca\u539f\u7406",id:"syncmap\u7684\u7528\u6cd5\u4ee5\u53ca\u539f\u7406",children:[]}],l={toc:m};function u(n){var e=n.components,t=(0,r.Z)(n,i);return(0,o.kt)("wrapper",(0,a.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"golang\u7684map\u7684\u4f75\u767c\u554f\u984c"},"GOLANG\u7684MAP\u7684\u4f75\u767c\u554f\u984c"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ithelp.ithome.com.tw/articles/10218003"},"Day5 .[\u91cd\u707d\u7d93\u9a57\u7bc7] gorutine\u8207map\u7684\u8b80\u5beb")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://golang.org/doc/faq#atomic_maps"},"[GOLANG FAQ \u6709\u95dcMAP\u7684\u554f\u984c]")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"contain a special check that automatically reports at run time when a map is modified unsafely by concurrent execution."),(0,o.kt)("li",{parentName:"ul"},"Map\u7a0b\u5f0f\u57f7\u884c\u6703\u5831\u932f\u8aa4")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ifun.dev/post/golang-concurrency/"},"\u7af6\u722d\u4f75\u767c\u5f97trace")),(0,o.kt)("p",null,"\u95dc\u65bcmap\u7684\u7af6\u722d\u89e3\u6cd5\u8aaa\u660e\n",(0,o.kt)("a",{parentName:"p",href:"https://www.jianshu.com/p/0c8519f4498e"},"\u614e\u7528golang\u4e2d\u7684map\uff0c\u7279\u522b\u662f\u5728\u5e76\u53d1\u64cd\u4f5c\u4e2d")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/45585589/golang-fatal-error-concurrent-map-read-and-map-write/45585833"},"golang-fatal-error-concurrent-map-read-and-map-write")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Control access to the map with sync.RWMutex{}. Use this option if you have single reads and writes, not loops over the map. See RWMutex\n\nUse a syncmap.Map{} instead of a normal map. This map is already taking care of race issues but may be slower depending on your usage. syncmap.Map{}s main advantage lies with for loops. See syncmap\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.gushiciku.cn/pl/peIP/zh-tw"},"[Golang\u4e2dsync.Map\u7684\u5be6\u73fe\u539f\u7406]")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u9700\u8981\u4f75\u767c\u8b80\u5beb\u6642\uff0c\u4e00\u822c\u7684\u505a\u6cd5\u662f\u52a0\u9396\uff0c\u4f46\u9019\u6a23\u6548\u80fd\u4e26\u4e0d\u9ad8\uff0cGo\u8a9e\u8a00\u5728 1.9 \u7248\u672c\u4e2d\u63d0\u4f9b\u4e86\u4e00\u7a2e\u6548\u7387\u8f03\u9ad8\u7684\u4f75\u767c\u5b89\u5168\u7684 sync.Map")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"syncmap\u7684\u7528\u6cd5\u4ee5\u53ca\u539f\u7406"},"sync.Map\u7684\u7528\u6cd5\u4ee5\u53ca\u539f\u7406"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.gushiciku.cn/pl/gEdt/zh-tw"},"\u70ba\u4ec0\u9ebc Go Map \u548c Slice \u662f\u975e\u7dda\u6027\u5b89\u5168\u7684\uff1f"),"\n\u5176\u5be6Slice\u4e5f\u662f\u975e\u7dda\u6027\u5b89\u5168\uff0c\u4f46\u9700\u81ea\u884c\u8655\u7406\u4e4b\uff0c\nGo \u8a9e\u8a00\u7684 sync.Map \u652f\u63f4\u4f75\u767c\u8b80\u5beb map\uff0c\u63a1\u53d6\u4e86 \u201c\u7a7a\u9593\u63db\u6642\u9593\u201d \u7684\u6a5f\u5236\uff0c\u4f46\u9810\u8a2d\u7684Map\u4e0d\u652f\u63f4\uff0cGo \u5b98\u65b9\u5728\u7d93\u904e\u4e86\u9577\u6642\u9593\u7684\u8a0e\u8ad6\u5f8c\uff0c\u8a8d\u70ba Go map \u66f4\u61c9\u9069\u914d\u5178\u578b\u4f7f\u7528\u5834\u666f\u3002"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://studygolang.com/articles/22128"},"\u7531\u6d45\u5165\u6df1\u804a\u804aGolang\u7684sync.Map")),(0,o.kt)("p",null,"\u4e0d\u9002\u7528\u4e8e\u5927\u91cf\u5199\u7684\u573a\u666f\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4read map\u8bfb\u4e0d\u5230\u6570\u636e\u800c\u8fdb\u4e00\u6b65\u52a0\u9501\u8bfb\u53d6\uff0c\u540c\u65f6dirty map\u4e5f\u4f1a\u4e00\u76f4\u664b\u5347\u4e3aread map\uff0c\u6574\u4f53\u6027\u80fd\u8f83\u5dee\u3002sync.Map\u9002\u7528\u573a\u666f\uff1a\u5927\u91cf\u8bfb\uff0c\u5c11\u91cf\u5199\u8207\u8b49\u660e"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"TBD: \u5f9e\u89e3\u8aaa\u770b\u4f86syncmap.Map\u4f3c\u4e4e\u66f4\u9069\u5408\u7528\u65bc\u6709loop read map\u6642\uff0c\u4f46\u662f\u5982\u679c\u662f\u5927\u91cf\u5beb\uff0c\u5c11\u91cf\u8b80\u4e5f\u662f\u55ce?\u5f9e\u89e3\u8aaa\u770b\u4f86\u662f\uff0c\u4f46\u4e0d\u78ba\u5b9a\u8a72\u8aaa\u7684\u5927\u91cf\u6bd4\u7387\u5982\u4f55\u8a6e\u91cb\uff0c\u5f85\u7814\u7a76\u78ba\u8a8d\u3002"),(0,o.kt)("p",null," i <= 100\nend:98.0947msalloc ","[280272]","      heapAlloc ","[280272]","      HeapInuse ","[950272]","      Goroutine","[3]","\nUpdate Unlock\nend:1m40.0204304salloc ","[303160]","          heapAlloc ","[303160]","      HeapInuse ","[802816]","      Goroutine","[3]"),(0,o.kt)("p",null,"\u76ee\u7684:\n\u9700\u8981\u7dad\u8b77\u4e0d\u540c\u7684\u975e\u540c\u6b65\u5de5\u4f5c(job)\uff0c\u4e26\u8a18\u9304\u6700\u5f8c\u7684\u5b8c\u6210\u6642\u9593\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u9700\u8981\u5b9a\u671f\u53bb\u67e5\u770b\u6240\u6709\u5de5\u4f5c\u7684\u6700\u5f8c\u5b8c\u6210\u6642\u9593\u4e26\u505a\u7d00\u9304\u4e0a\u50b3\uff0c\u4e0a\u50b3\u5f8c\u5373\u522a\u9664\u76ee\u524d\u7dad\u8b77\u7684\u6642\u9593\u3002"),(0,o.kt)("p",null,"\u9047\u5230\u554f\u984c:\n\u77e5\u9053\u5982\u679c\u975e\u540c\u6b65\u5b58\u53d6\u76f8\u540c\u7684\u8b8a\u6578\u6703\u6709data race\u7684\u554f\u984c\uff0c\u900f\u904ego run -race\u53ef\u6aa2\u6e2c\u3002"),(0,o.kt)("p",null,"\u89e3\u6c7a\u65b9\u6cd5:\n1.\u4f7f\u7528\u9396 2.\u4f7f\u7528syncMap"),(0,o.kt)("p",null,"\u7d50\u679c:\n\u65b9\u6cd51\u7adf\u7136\u9396\u4e0d\u4f4f? \u8ffd\u67e5\u7d50\u679c\u662f\u56e0\u70ba\u91cd\u8907create map \u8b8a\u6578\u7684\u5730\u65b9\u6709\u554f\u984c\n\u65b9\u6cd52\u6210\u529f"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"lock map",lock:!0,map:!0},'package main\n\nimport (\n    "fmt"\n    "sync"\n    "time"\n)\n\nfunc main() {\n    newTimeMapCache()\n    go func() {\n        for {\n            time.Sleep(5 * time.Second)\n            for device, time := range TimeMap().AllMap() {\n                fmt.Printf("read TimeMap job(%s) time(%d)\\n", device, time)\n            }\n            //record then remove all\n            TimeMap().RemoveAllMap()\n        }\n    }()\n\n    jobRetry_Ch := make(chan string, 2)\n    for w := uint(1); w <= 2; w++ {\n        go Woker(w, jobRetry_Ch)\n    }\n    for i := 0; i < 10; i++ {\n        go func(i int) {\n            jobRetry_Ch <- fmt.Sprintf("job_%d", i)\n\n        }(i)\n    }\n\n    time.Sleep(20 * time.Second)\n    fmt.Printf("end")\n}\n\nfunc Woker(id uint, jobs <-chan string) {\n    for j := range jobs {\n        time := time.Now().UnixNano()\n        TimeMap().Update(fmt.Sprintf("job_%s", j), time)\n\n    }\n    fmt.Println("end RetryPushWoker", id)\n}\n\nvar (\n    tmc *timeMapCache\n    mu  sync.RWMutex\n)\n\ntype TimeMapCache interface {\n    AllMap() map[string]int64\n    Update(jobID string, time int64)\n    RemoveAllMap()\n}\n\ntype timeMapCache struct {\n    timeMap map[string]int64 // key is device id, and value is push time\n}\n\nfunc (d *timeMapCache) AllMap() map[string]int64 {\n    mu.RLock()\n    defer mu.RUnlock()\n    return d.timeMap\n}\n\nfunc (d *timeMapCache) Update(jobID string, time int64) {\n    fmt.Println("Update Lock")\n    mu.Lock()\n    defer mu.Unlock()\n    d.timeMap[jobID] = time //why can\'t lock??\n    fmt.Printf("Update key(%s) value(%d) \\n", jobID, time)\n    fmt.Println("Update Unlock")\n}\n\nfunc (d *timeMapCache) RemoveAllMap() {\n    mu.Lock()\n    defer mu.Unlock()\n    d.timeMap = make(map[string]int64)\n}\nfunc newTimeMapCache() TimeMapCache {\n    timeMap := make(map[string]int64)\n    tmc = &timeMapCache{timeMap: timeMap}\n    return tmc\n}\n\nfunc TimeMap() TimeMapCache {\n    // if tmc == nil {\n    //  newTimeMapCache() // will cause data race\n    // }\n    return tmc\n\n}\n\n')),(0,o.kt)("p",null,"\u65b9\u6cd5\u4e8c:\nsync.Map\uff0c\u8a72\u5305\u4e2d\u7684Map\u63d0\u4f9b\u4e86Store\u3001Load\u3001Delete\u3001Range\u7b49\u64cd\u3002\u4e26\u4e14sync\u5305\u4e2d\u7684Map\u662f\u958b\u7bb1\u53ef\u7528\u7684\uff0c\u4e5f\u5373\u662f\u8072\u660e\u5f8c\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-GO",metastring:"sync.Map","sync.Map":!0},'package main\n\nimport (\n    "fmt"\n    "sync"\n    "time"\n)\n\nfunc main() {\n\n    go func() {\n        for {\n            time.Sleep(5 * time.Second)\n            TimeMap.Range(func(key, value interface{}) bool {\n                fmt.Printf("read TimeMap job(%s) time(%d)\\n", key, value)\n                DeleteTimeMap(key.(string))\n                return true\n            })\n\n        }\n    }()\n    for i := 0; i < 10; i++ {\n        go func(i int) {\n            time := time.Now().UnixNano()\n            UpdateTimeMap(fmt.Sprintf("job_%d", i), time)\n        }(i)\n    }\n\n    time.Sleep(20 * time.Second)\n    fmt.Printf("end")\n}\n\nvar TimeMap sync.Map\n\nfunc UpdateTimeMap(jobID string, time int64) {\n    fmt.Println("Update Lock")\n    TimeMap.Store(jobID, time)\n    fmt.Printf("Update key(%s) value(%d) \\n", jobID, time)\n    fmt.Println("Update Unlock")\n}\nfunc DeleteTimeMap(jobID string) {\n    TimeMap.Delete(jobID)\n}\n\n')))}u.isMDXComponent=!0}}]);